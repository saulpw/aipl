!test-input
https://en.wikipedia.org/wiki/Antikythera_mechanism

# load text of wikipedia article
!read
!extract-text>text

# possibly, make a summary of the whole thing
!format
The following is a wikipedia article, which we're interested in extracting locations from for a map.
---
{text}
---
Please write a 2-sentence summary of the article, focused on the overall location(s) mentioned in the text, which will be used in the next step to provide an overall context for extracting a location from each paragraph.
!llm>summary model=gpt-3.5-turbo-16k

# go through each paragraph and extract text locations
!format
{text}
!split>paragraph sep=\n
!match ^[^-].{{140,}}$
!filter 
!format
We're extracting locations from a paragraph of a wikipedia article. Here's our summary of the whole article: "{summary}".
---
Here's the paragraph we want the locations from:
{paragraph}
---
Locations should be in quotes, comma-separated, and unique for the geocoding step. Add in the country or other major geographic container at the end of the location (eg, "New York City, NY" becomes "New York City, NY, USA", "Galapagos Archipelago" becomes "Galapagos Archipelago, Ecuador").

Please ONLY respond with a list of locations, nothing else--there is no need to add caveats or explanations, the answers will inevitably not be "perfect". If there are no locations mentioned in this specific paragraph, please only respond with a comma ",". Do not use locations from the summary unless they appear in the paragraph.
!llm
!split>location sep=,

!format
The following is a location. Please respond with your best guess at to its latitude and longitude. DO NOT respond with anything except <LATITUDE>, <LONGITUDE>. You may infer the country of origin.

For example:
LOCATION: New York City, NY
GEOCODED: 40.712778, -74.006111

LOCATION: Wreck of the Titanic
GEOCODED: 41.725556, -49.946944

LOCATION: Acropolis of Athens
GEOCODED: 37.9715, 23.7262

LOCATION: {location}
GEOCODED: 
!llm>geocoded

!json indent=2

!print
!save locations.json

# make into a map
!python 
import json
import folium
import itertools

colors = itertools.cycle(['red', 'blue', 'green', 'purple', 'orange', 'darkred', 'lightred', 'beige', 'darkblue', 'darkgreen', 'cadetblue', 'darkpurple', 'pink', 'lightblue', 'lightgreen', 'gray', 'black', 'lightgray'])

# Load locations data from JSON file
with open('locations.json', 'r') as f:
    data = json.load(f)

# Initialize map centered around (0, 0)
m = folium.Map(location=[0, 0], zoom_start=4)

# List to store coordinates for lines
coords = []

# Parse and add each location to the map
for item in data:
    for subitem in item["_"]:
        if subitem["_"]:
            paragraph = subitem["paragraph"]
            color = next(colors)
            for loc in subitem["_"]:
                geocoded = loc["geocoded"]
                location_name = loc["location"]
                try:
                    lat, lon = [float(coord) for coord in geocoded.split(',')]
                except:
                    print("skipping", location_name, geocoded, file=sys.stderr)
                    continue
                marker = folium.Marker([lat, lon], icon=folium.Icon(color=color, icon="cloud"))
                marker.add_child(folium.Tooltip(text=location_name, permanent=True))
                marker.add_child(folium.Popup(paragraph, max_width=500))
                marker.add_to(m)

# Save the map to an HTML file
m.save('map.html')
